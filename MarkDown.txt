
0. <Markdown 이란?>
    : "HTML" 및 "JSX" 코드로 변경시킬 수 있는 "TEXT 기반 컨텐츠"
-           StackOverFlow 사이트에서, 글을 작성할 때를 기억하자

1. <Markdown 의 장점>
    1. 간결하다.
    2. 별도의 도구없이 작성가능하다.
    3. 다양한 형태로 변환이 가능하다.
    4. 텍스트(Text)로 저장되기 때문에 용량이 적어 보관이 용이하다.
    5. 텍스트파일이기 때문에 버전관리시스템을 이용하여 변경이력을 관리할 수 있다.
    6. 지원하는 프로그램과 플랫폼이 다양하다.

2. <왜 블로그를 만들때, Markdown 을 사용하는가?>
    : 앞서 말한 장점들 덕분에, blog post에서, content 를 작성할때, 간편하고, 깔끔한 "텍스트"로, 작성 후
        JSX 코드로 변환시켜, 렌더링을 할 수 있기 때문

    : 만약, 블로그 글을 작성하는데, "HTML 코드"로 전부 글을 작성한다면,
        한줄 한줄마다, p 태그로 묶어주랴, h1 태그로 묶어주랴, 띄어쓸때, nbsp 쓰고, br 쓰고, /n 쓰고 아주 가독성이 좋지 못할 것이다.
        

3. <Markdown 사용법>
    :https://gist.github.com/ihoneymon/652be052a0727ad59601

-   <Markdown 을 JSX 코드로 변환시켜, 렌더링되게 하기>

    1. Content 에 "간편한 Mark-down 언어" 로, 작성 한다.
    2. "react-markdown" 패키지를 install 한 후,     //  import ReactMarkdown from "react-markdown"  // 으로 import 한다
        https://www.npmjs.com/package/react-markdown

    3. ReactMarkdown 태그로 감싼 후, content 를 렌더링한다.

        <ReactMarkdown> {dummyData.content} </ReactMarkdown>

    4. 짜잔- markdown 언어가 JSX 로 바뀌어, 렌더링 된다.

4. < 이미지 추가하기 + 이미지와 연결하기 + 이미지를 Next.js 에서 쓰기좋은 이미지(Image태그)로 변경시키기 + 이미지 크기조절 >

    1) MarkDown 에서, "이미지와 연결 하기 위해서는",
-       반드시, [ MARKDOWN 의 파일이름 ] 과, [ 이미지같은 소스를 저장한 폴더이름 ] 이 같아야 인식이 가능하다.

        EX)     MSMS.md                     라는 markdown 파일이 있다면
            /public/src/MSMS/xxx.jpg       그 안에 이미지를 넣려면, [MSMS] 라는 폴더가 필요하다

    2) 이미지 추가하기

        ![Alt text](/path/to/img.jpg)

-   3) 이미지를 Next.js 의 형식으로 변환시키기 ***


5. < META DATA 추가하기 > With  "YAML 언어"
    : meta DATA 를 추가할 때는, YAML 언어를 사용하여, 추가한다.

        <YAML 주요 특징>
            1. 여러 문서의 경우 [ --- ] 으로 구분 짓는다.
            2. 문서의 끝은 [ ... ] 으로 표기한다.
            3. 키 와 밸류 는 [ key: value ] 로 표기한다. "중요한 점은 : 다음에는 반드시 한칸 띄어야 한다는 것이다." 

            4. 공백 문자들로 기본 구조를 구성한다. "단 tab 은 사용하지 않는다."
            5. 리스트를 표기할 때에는 [ [a,b,c] ] 처럼 나열하되, "한 줄에 전부 표기한다."

            6. 문자열은 기본적으로 "" 없이 쓸 수 있다. 써도 된다.
            7. 여러 라인의 문자열은 [ | ] 또는 [ > ] 를 사용하여, 표기할 수 있다.

    ex) <\data\posts\getting-start-with-nextjs.md>

            ---
            title: "Getting start with Next JS"
            date: "2022-10-15"
            author: "ms"
            image: \src\posts\getting-start-with-nextjs\IMG_5584.JPG            // 여기가 MEATA DATA SECTION
            description: description
            isFeatured: true
            ---
            
            # This is a title
            
            This is Some regular TEXT [link](https://google.com)                // 여기가 CONTENT SECTION

        
-   이후 이 파일을 FETCH 하고나면, META DATA와 CONTENT 를 나눌 수 있다.
        
6. META DATA와 CONTENT 분리시키기 [ WITH gray-matter]
    : gray-matter 패키지를 이용하여, META-DATA와 CONTENT 를 분리시킨다.

    https://www.npmjs.com/package/gray-matter


    < gray-matter 의 사용>

        - 메인 컨텐츠와 MEATA DATA 로 나뉘어있는 md 파일을

            ---
            title: Hello
            slug: home
            ---
            <h1>Hello world!</h1>

        - 이렇게, Object 형태(content, 와 data 키를 가지는) 로 바꾸게 만들어 준다.

            {
                content: '<h1>Hello world!</h1>',
                data: { 
                  title: 'Hello', 
                  slug: 'home' 
                }
            }

        - 어떻게? 이렇게!

            import matter from 'gray-matter';

            matter(mdfile)
            
7. fs 로 파일 읽기, fs.readdirSync , fs.readfileSync 

    1. "readfileSync" : 파일을 지정하면, 그 안의 내용들을 읽어준다.
    2. "readdirSync" : 폴더를 지정하면, 그 안에 있는 파일 이름을 전부 읽어준다.

        readdirSync(folderName)
            =>
                [
                    'feature-post.js',
                    'feature-post.module.css',
                    'welcome.js',
                    'welcome.module.css'
                ]
    3. 

< Mark Down 언어 >

1. 링크 사용
    [link](https:...com)

2. 이미지 사용 ( <ReactMarkdown components={ customComponent }>   </ ReactMarkdown> ) 쓰면 굳
    ![alt](src)

[** 추가. 이미지 오버라이드]

        const customComponent = {
            img(image){
                return <Image src={...} alt={...} width={...} height={...} />
            }
        }

        <ReactMarkdown components={ customComponent }>  {markdown.content} </ ReactMarkdown>

            * image.alt => markdown 안에 적은 alt 가 그대로 복사됨
            * image.src => markdown 안에 적은 src 가 그대로 복사됨

3. 컨텐츠,헤더 나누기 사용 (gray-matter 쓰면 굳)

    ---

    postid: "..."
    date: "..."
    description: "..."

    ---

    this is content

4. 코드 보이게하기 ( <ReactMarkdown components={ customComponent }>   </ ReactMarkdown> ) + "react-syntax-highlighter 패키지"

    ```.js          //JAVASCRIPT 니까 js 인거다

    const xx = ....
    function xx(){
        ....
    }

    ```
-   [추가. 코드 오버라이드 with "react-syntax-highlighter" 패키지] 

        const { 원하는테마 as SyntaxHighlighter } from "react-syntax-highlighter"
        const { xxxStyle } from "react-syntax-highlighter/dist/cjs/styles/원하는테마"
-           * 이정도 선택하면 {} 안에 수많은 선택지가 나오는데 알아서 선택한다.

        const customComponent = {
            code(code) {
                return (
                <SyntaxHighlighter language={code.language} style={ xxxStyle } children={code.children} />
                );
            },
        }

        "npm 패키지 설명" : https://www.npmjs.com/package/react-syntax-highlighter

            "원하는 테마" 는 "Async Build", "Light Build", "Prism" 이 있다. [npm 패키지 설명 참조]
            ** "cjs" 가 중요하다
            "npm 패키지 설명"에는 "esm 으로되어있지만, 그건 로컬", "cjs" 는 "서버"

        <예시>

            import { Prism as SyntaxHighlighter } from "react-syntax-highlighter";
            import { dark } from "react-syntax-highlighter/dist/cjs/styles/prism";

            function PostContent(props) {
            const { posts } = props;

            const myComponents = {
                code(code) {
                    return ( <SyntaxHighlighter language={code.language} style={dark} children={code.children} /> );
                },
            };

            return (
                <article className={styles.content}>
                    <PostHeader posts={posts} />
    -               <ReactMarkdown components={myComponents}>{posts.content}</ReactMarkdown>
                </article>
            );
    }

    
< key board short cut >

1. 굵게 
    ctrl + b